{
	"info": {
		"_postman_id": "6ec27ef5-d721-45f0-b658-9c49a05d1461",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"var jsonData = pm.response.json();",
							"var get_token = jsonData.token;",
							"console.log(\"======\" + get_token)",
							"",
							"pm.environment.set(\"token\", get_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Mick",
							"type": "text"
						},
						{
							"key": "password",
							"value": "qwe666",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}login",
					"host": [
						"{{url}}login"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mick",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}new_data",
					"host": [
						"{{url}}new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"    var responseData = pm.response.json();",
							"    ",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"name\", function () {",
							"    pm.expect(responseData.name).to.eql(\"Mick\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"pm.test(\"age\", function () {",
							"pm.expect(responseData.age).to.eql(\"31\")",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(responseData.salary).to.eql(1000);",
							"});",
							"",
							"// 7. Спарсить request.",
							"var requestData = request.data",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name1\", function () {",
							"    pm.expect(responseData.name).to.eql(requestData.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age1\", function () {",
							"    pm.expect(responseData.age).to.eql(requestData.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary1\", function (){",
							"    pm.expect(responseData.salary).to.eql(parseInt(requestData.salary));",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(responseData.family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"salary_1_5_years\", function () {",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql((requestData.salary)*4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Mick",
							"type": "text"
						},
						{
							"key": "age",
							"value": "31",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5005/user_info_3",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"",
							"// 2. Статус код 200",
							"pm.test(\"Status code 200\", function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"// 3. Спарсить response body в json.",
							"var responseData = pm.response.json();",
							"",
							"",
							"// 4. Спарсить request.",
							"var requestData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Your_name\", function () {",
							"    pm.expect(responseData.name).to.eql(requestData.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(responseData.age).to.eql(requestData.age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(responseData.salary).to.eql(parseInt(requestData.salary));",
							"})",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(\"=====family\", responseData.family);",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog_name\", function () {",
							"   pm.expect(responseData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"dog_age\", function () {",
							"    pm.expect(responseData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"name_Luky\", function () {",
							"    pm.expect(responseData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Laky_age_4\", function () {",
							"    pm.expect(responseData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Mick&age=31&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Mick"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"status_code_200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(respData.age).to.eql(parseInt(reqData.age));",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(reqData.salary);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(respData.salary);",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(respData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(respData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(respData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"salary_0\", function () {",
							"    pm.expect(respData.salary[0]).to.eql(parseInt(reqData.salary));",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"salary_1\", function () {",
							"    pm.expect(parseInt(respData.salary[1])).to.eql((reqData.salary)*2);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							" pm.test(\"salary_2\", function (){",
							"    pm.expect(parseInt(respData.salary[2])).to.eql((reqData.salary)*3);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"",
							"// var get_name = respData.name;",
							"// console.log(\"======\" + get_name);",
							"pm.environment.set(\"name\", respData.name);",
							"",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", respData.age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", respData.salary[0]);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Mick&age=31&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Mick"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"status_code_200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"var respData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"var reqData = request.data;",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"start_qa_salary\", function () {",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"qa_salary_after_6_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");",
							"})",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"qa_salary_after_12_months\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"// 1. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"person\", function () {",
							"    pm.expect(respData).to.have.property(\"person\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start_qa_salary1\", function () {",
							"    pm.expect(respData.start_qa_salary).to.eql(parseInt(reqData.salary));",
							"})",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months1\", function () {",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql((reqData.salary)*2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months\", function () {",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql((reqData.salary)*2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_1.5_year\", function () {",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql((reqData.salary)*3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_years\", function () {",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql((reqData.salary)*3.8);",
							"})",
							"",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"u_name_1\", function () {",
							"    pm.expect(respData.person.u_name[1]).to.eql(parseInt(reqData.salary));",
							"})",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age\",function () {",
							"    pm.expect(respData.person.u_age).to.eql(parseInt(reqData.age));",
							"});",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years\", function () {",
							"    pm.expect(respData.person.u_salary_5_years).to.eql((reqData.salary)*4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person."
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}